import React from 'react';
import { Col, Container, Row } from 'reactstrap';
import { useAppSelector } from '../../redux/store/hooks';
import { ButtonParams, actionButton, tab } from '../../types/transaction_types';

import CustomButton from '../CustomButton/index';
import './styles.scss';

interface ControlButtonsProps {
  page?: string;
  buttons?: ButtonParams[];
  selectedTransactionIdx?: number[];
  selectedTab?: string;
}
const ControlButtons: React.FunctionComponent<ControlButtonsProps> = (
  props: ControlButtonsProps
) => {
  const { page, buttons, selectedTransactionIdx, selectedTab } = props;
  const {
    errorMessageTransaction,
    loadingTransaction,
    successMessageTransaction,
    exchangeRate
  } = useAppSelector(state => state.transaction);

  const disableButton = (button: string) => {
    if (selectedTab === tab.waitingApproval && button === actionButton.onHold) {
      return false;
    }
    if (
      selectedTab === tab.onHold &&
      (button === actionButton.return ||
        button === actionButton.waitingApproval ||
        button === actionButton.reject)
    ) {
      return false;
    }
    if (
      selectedTab === tab.unMatched &&
      (button === actionButton.forceMatch ||
        button === actionButton.return ||
        button === actionButton.onHold ||
        button === actionButton.reject)
    ) {
      return false;
    }
    if (selectedTab === tab.return && button === actionButton.waitingApproval) {
      return false;
    }
    if (
      selectedTab === tab.inQueueWithdrawal &&
      (button === actionButton.processWithdrawal ||
        button === actionButton.moveToTop ||
        button === actionButton.reject)
    ) {
      return false;
    }
    if (
      (selectedTab === tab.actionRequired ||
        selectedTab === tab.completedDeposits) &&
      (button === actionButton.restart ||
        button === actionButton.moveToTop ||
        button === actionButton.pause ||
        button === actionButton.processWithdrawal)
    ) {
      return false;
    }
    return true;
  };

  const renderRates = page => {
    if (page === 'deposits') {
      return (
        <div className='d-flex flex-column gap-3 pt-4 pt-lg-0'>
          <Row>
            <Col className='col-2 '>
              <p className='rates-text'>Lora FX Rates:</p>
            </Col>
            <Col className='col-xl-1 col-sm-2'>
              <p className='rates-text'>USD/HKD</p>
            </Col>
            <Col className='col-xl-1 col-sm-2'>
              <p className='rates-text'>
                {exchangeRate &&
                  Number.parseFloat(exchangeRate.withdrawal?.computedRate)
                    .toFixed(4)
                    .toString()}
              </p>
            </Col>
            <Col className='col-xl-1 col-sm-2'>
              <p className='rates-text'>HKD/USD</p>
            </Col>
            <Col className='col-xl-1 col-sm-2'>
              <p className='rates-text'>
                {exchangeRate &&
                  Number.parseFloat(exchangeRate.deposit?.computedRate)
                    .toFixed(4)
                    .toString()}
              </p>
            </Col>
          </Row>
          <Row>
            <Col className='col-2'>
              <p className='rates-text'>REUTERS FX Rates:</p>
            </Col>
            <Col className='col-xl-1 col-sm-2'>
              <p className='rates-text'>USD/HKD</p>
            </Col>
            <Col className='col-xl-1 col-sm-2'>
              <p className='rates-text'>
                {exchangeRate &&
                  Number.parseFloat(exchangeRate.withdrawal?.rate)
                    .toFixed(4)
                    .toString()}
              </p>
            </Col>
            <Col className='col-xl-1 col-sm-2'>
              <p className='rates-text'>HKD/USD</p>
            </Col>
            <Col className='col-xl-1 col-sm-2'>
              <p className='rates-text'>
                {exchangeRate &&
                  Number.parseFloat(exchangeRate.deposit?.rate)
                    .toFixed(4)
                    .toString()}
              </p>
            </Col>
          </Row>
        </div>
      );
    }
  };
  return (
    <Container id='control-btn-container' className='py-4'>
      <Row>
        <Col xs={12} lg={7} xl={6}>
          {page === 'waiting approval' ? (
            <div className='d-flex flex-wrap gap-4'>
              <div className='d-flex flex-column gap-3 '>
                {buttons
                  ?.slice(0, 2)
                  .map((btn: ButtonParams, index: number) => (
                    <CustomButton
                      disabled={disableButton(btn.title)}
                      onPressButton={btn.onPressButton}
                      key={index}
                      title={btn.title}
                      titleStyle='ubuntu-font_700'
                      isLoading={
                        index === 0
                          ? loadingTransaction.source ===
                              'onHoldTransactionAction/pending' &&
                            loadingTransaction.status
                          : loadingTransaction.source ===
                              'approveTransactionAction/pending' &&
                            loadingTransaction.status
                      }
                    />
                  ))}
              </div>
              <div className='d-flex flex-column gap-3 '>
                {buttons
                  ?.slice(2, 4)
                  .map((btn: ButtonParams, index: number) => {
                    return (
                      <CustomButton
                        disabled={disableButton(btn.title)}
                        onPressButton={btn.onPressButton}
                        key={index}
                        title={btn.title}
                        titleStyle='ubuntu-font_700'
                        isLoading={
                          index === 0
                            ? loadingTransaction.source ===
                                'needApprovalTransactionAction/pending' &&
                              loadingTransaction.status
                            : loadingTransaction.source ===
                                'deleteTransactionAction/pending' &&
                              loadingTransaction.status
                        }
                      />
                    );
                  })}
              </div>
              <div className='d-flex flex-column-reverse gap-3'>
                {buttons
                  ?.slice(4, 6)
                  .map((btn: ButtonParams, index: number) => {
                    return (
                      <CustomButton
                        disabled={disableButton(btn.title)}
                        onPressButton={btn.onPressButton}
                        key={index}
                        title={btn.title}
                        titleStyle='ubuntu-font_700'
                        isLoading={false}
                      />
                    );
                  })}
              </div>
            </div>
          ) : page === 'withdrawals' ? (
            <div className='d-flex gap-4 w-50'>
              <div className='d-flex flex-row gap-3 flex-wrap'>
                {buttons?.map((btn: ButtonParams, index: number) => {
                  return (
                    btn?.tabs?.includes(selectedTab!) && (
                      <CustomButton
                        onPressButton={btn.onPressButton}
                        disabled={disableButton(btn.title)}
                        key={index}
                        title={btn.title}
                        titleStyle='ubuntu-font_700'
                        isLoading={
                          index === 0
                            ? loadingTransaction.source ===
                                'processWithdrawalAction/pending' &&
                              loadingTransaction.status
                            : loadingTransaction.source ===
                                'queueControlAction/pending' &&
                              loadingTransaction.status
                        }
                      />
                    )
                  );
                })}
              </div>
            </div>
          ) : (
            <div className='d-flex gap-4'>
              <div className='d-flex flex-column gap-3'>
                {buttons
                  ?.slice(0, 2)
                  .map((btn: ButtonParams, index: number) => (
                    <CustomButton
                      onPressButton={btn.onPressButton}
                      disabled={disableButton(btn.title)}
                      key={index}
                      title={btn.title}
                      titleStyle='ubuntu-font_700'
                    />
                  ))}
              </div>
              <div className='d-flex flex-column gap-3'>
                {buttons
                  ?.slice(2, 4)
                  .map((btn: ButtonParams, index: number) => {
                    return (
                      <CustomButton
                        disabled={disableButton(btn.title)}
                        onPressButton={btn.onPressButton}
                        key={index}
                        title={btn.title}
                        titleStyle='ubuntu-font_700'
                      />
                    );
                  })}
              </div>
            </div>
          )}
        </Col>
        {[
          'updateTransactionRemittanceAction/rejected/NEEDAPPROVAL',
          'updateTransactionRemittanceAction/rejected/ONHOLD',
          'updateTransactionRemittanceAction/rejected/RETURN',
          'approveTransactionAction/rejected',
          'deleteTransactionAction/rejected',
          'deleteRemittanceTransactionAction/rejected',
          'onHoldTransactionAction/rejected',
          'forceMatchTransactionAction/rejected',
          'needApprovalTransactionAction/rejected'
        ].includes(errorMessageTransaction.source) ? (
          <p className='error-message'>{errorMessageTransaction.message}</p>
        ) : null}
        {[
          'updateTransactionRemittanceAction/fulfilled/NEEDAPPROVAL',
          'updateTransactionRemittanceAction/fulfilled/ONHOLD',
          'updateTransactionRemittanceAction/fulfilled/RETURN',
          'approveTransactionAction/fulfilled',
          'deleteTransactionAction/fulfilled',
          'deleteRemittanceTransactionAction/fulfilled',
          'onHoldTransactionAction/fulfilled',
          'forceMatchTransactionAction/fulfilled',
          'needApprovalTransactionAction/fulfilled'
        ].includes(successMessageTransaction.source) ? (
          <p className='success-message'>{successMessageTransaction.message}</p>
        ) : null}
      </Row>
    </Container>
  );
};

export default ControlButtons;
